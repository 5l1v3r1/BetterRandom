variables:
- group: Build Secrets
- name: zuluLinux08
  value: '/usr/lib/jvm/zulu-8-azure-amd64'
- name: zuluLinux11
  value: '/usr/lib/jvm/zulu-11-azure-amd64'
- name: zuluLinuxLatest
  value: '/usr/lib/jvm/zulu-12-azure-amd64' # JDK 13 isn't preinstalled as of 2019-09-18
- name: openjnine11linux
  value: 'https://api.adoptopenjdk.net/v3/binary/latest/11/ga/linux/x64/jdk/openj9/normal/adoptopenjdk'
- name: openJNineLatestLinux
  value: 'https://api.adoptopenjdk.net/v3/binary/latest/13/ga/linux/x64/jdk/openj9/normal/adoptopenjdk'
trigger:
  batch: true
  branches:
    include:
      - '*'
    exclude:
      - 'dependabot/*'
  paths:
    exclude:
      - README.md
      - CHANGELOG.md
      - .submodules
      - .github/
      - docs/
      - 'benchmark/*.iml'
      - 'betterrandom/*.iml'
      - 'FifoFiller/*.iml'
schedules:
  - cron: "23 0 * * *"
    displayName: Nightly
    branches:
      include:
        - master
        - java7
pr:
  branches:
    include:
      - master
  paths:
    exclude:
      - README.md
      - CHANGELOG.md
      - .submodules
      - .github/
      - docs/
      - 'benchmark/*.iml'
      - 'betterrandom/*.iml'
      - 'FifoFiller/*.iml'
stages:
  - stage: UnitTests
    jobs:
      - job: UnitLinuxPreinstalledZulu
        strategy:
          matrix:
            OpenJdk08:
              JAVA8: 'true'
              JAVA_HOME: $(zuluLinux08)
              artifactEnvName: OpenJdk08Linux
            OpenJdk11:
              JAVA_HOME: $(zuluLinux11)
              artifactEnvName: OpenJdk11Linux
            OpenJdkLatest:
              JAVA_HOME: $(zuluLinuxLatest)
              artifactEnvName: OpenJdkLatestLinux
        pool:
          vmImage: 'ubuntu-latest'
        steps:
        - template: etc/azureTemplate/unitTestsUbuntu.yml
        - template: etc/azureTemplate/publishCoverage.yml
      - job: UnitLinux
        variables:
          JAVA_HOME: jdk
        strategy:
          matrix:
            OpenJNine11:
              javaUrl: $(OpenJNine11Linux)
              artifactEnvName: OpenJNine08Linux
            OpenJNineLatest:
              javaUrl: $(OpenJNineLatestLinux)
              artifactEnvName: OpenJNineLatestLinux
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - template: etc/azureTemplate/installJavaJti.yml
          - template: etc/azureTemplate/unitTestsUbuntu.yml
          - template: etc/azureTemplate/publishCoverage.yml
      - job: UnitOracleLimitedCrypto
        pool:
          vmImage: 'ubuntu-latest'
        variables:
          JAVA8: 'true'
          artifactEnvName: OracleLimitedCrypto
        steps:
          - script: sudo ./etc/scripts/installOracleJdk8.sh
            displayName: Download & Install Java
          - template: etc/azureTemplate/unitTestsUbuntu.yml
          - template: etc/azureTemplate/publishCoverage.yml
      - job: UnitMac
        variables:
          JAVA_HOME: jdk
        strategy:
          matrix:
            # Java 7 is /Library/Java/JavaVirtualMachines/jdk1.7.0_80.jdk/Contents/Home
            OpenJdk08:
              JAVA8: 'true'
              javaVersion: 8
              artifactEnvName: OpenJdk08Mac
            OpenJdk11:
              javaVersion: 11
              artifactEnvName: OpenJdk11Mac
            OpenJdkLatest:
              javaVersion: 13
              artifactEnvName: OpenJdkLatestMac
        pool:
          vmImage: 'macOs-10.13'
        steps:
          - template: etc/azureTemplate/installJavaMacLocal.yml
            parameters:
              javaVersion: $(javaVersion)
          - template: etc/azureTemplate/unitTestsMac.yml
          - template: etc/azureTemplate/publishCoverage.yml
      - job: UnitWindows
        variables:
          artifactEnvName: Windows
        strategy:
          matrix:
            OpenJdk08:
              JAVA8: 'true'
              JAVA_HOME_SOURCE: JAVA_HOME_8_X64
              artifactEnvName: OpenJdk08Windows
            OpenJdk11:
              JAVA_HOME_SOURCE: JAVA_HOME_11_X64
              artifactEnvName: OpenJdk11Windows
            OpenJdkLatest:
              JAVA_HOME_SOURCE: JAVA_HOME_13_X64
              artifactEnvName: OpenJdkLatestWindows
        pool:
          vmImage: 'windows-2019'
        steps:
          - task: PowerShell@2
            displayName: Build & Test
            inputs:
              filePath: etc/scripts/unit-tests.ps1
              arguments: $(JAVA_HOME_SOURCE)
            env:
              RANDOM_DOT_ORG_KEY: $(RANDOM_DOT_ORG_KEY)
              JAVA_HOME: $(JAVA_HOME)
          - template: etc/azureTemplate/publishCoverage.yml
  - stage: Mutation
    dependsOn: UnitTests
    jobs:
    - job: Mutation
      variables:
        JAVA_HOME: $(zuluLinuxLatest)
      timeoutInMinutes: 120 # FIXME: Remove once reliably passing in 50
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - template: etc/azureTemplate/installHaveged.yml
        - script: ./etc/scripts/mutation.sh
          displayName: Build & Run Mutation Tests
          env:
            RANDOM_DOT_ORG_KEY: $(RANDOM_DOT_ORG_KEY)
            JAVA_HOME: $(zuluLinux11)
        - task: PublishBuildArtifacts@1
          displayName: Publish Mutation Report
          inputs:
            pathtoPublish: betterrandom/target/pit-reports
            artifactName: Mutation Coverage
  - stage: Benchmarks
    dependsOn: UnitTests
    jobs:
    - job: BenchmarkLinuxPreinstalledZulu
      timeoutInMinutes: 80
      strategy:
        matrix:
          OpenJdk08:
            JAVA8: 'true'
            JAVA_HOME: $(zuluLinux08)
            artifactEnvName: 'OpenJDK08Linux'
          OpenJdk11:
            JAVA_HOME: $(zuluLinux11)
            artifactEnvName: 'OpenJdk11Linux'
          OpenJdkLatest:
            JAVA_HOME: $(zuluLinuxLatest)
            artifactEnvName: 'OpenJDKLatestLinux'
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - template: etc/azureTemplate/benchmark.yml
    - job: BenchmarkLinux
      timeoutInMinutes: 80
      variables:
        JAVA_HOME: jdk
      strategy:
        matrix:
          OpenJNine11:
            javaUrl: $(OpenJNine11Linux)
            artifactEnvName: 'OpenJNine11Linux'
          OpenJNineLatest:
            javaUrl: $(OpenJNineLatestLinux)
            artifactEnvName: 'OpenJNineLatestLinux'
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - template: etc/azureTemplate/installJavaJti.yml
        - template: etc/azureTemplate/benchmark.yml
    - job: BenchmarkMac
      timeoutInMinutes: 80
      variables:
        artifactEnvName: OpenJdkMac
        JAVA_HOME: jdk
      strategy:
        matrix:
          OpenJdk08:
            artifactEnvName: 'OpenJdk08Mac'
            JAVA8: 'true'
            javaVersion: 8
          OpenJdk11:
            artifactEnvName: 'OpenJdk11Mac'
            javaVersion: 11
          OpenJdkLatest:
            artifactEnvName: 'OpenJdkLatestMac'
            javaVersion: 12
      pool:
        vmImage: 'macOs-10.13'
      steps:
        - template: etc/azureTemplate/installJavaMacLocal.yml
          parameters:
            javaVersion: $(javaVersion)
        - template: etc/azureTemplate/benchmark.yml
          parameters:
            whichJavaHome: JAVA_HOME_$(javaVersion)_X64
    - job: BenchmarkWindows
      timeoutInMinutes: 80
      pool:
        vmImage: 'windows-2019'
      strategy:
        matrix:
          OpenJdk08:
            JAVA8: 'true'
            JAVA_HOME_SOURCE: JAVA_HOME_8_X64
            artifactEnvName: 'OpenJdk08Windows'
          OpenJdk11:
            JAVA_HOME_SOURCE: JAVA_HOME_11_X64
            artifactEnvName: 'OpenJdk11Windows'
          OpenJdkLatest:
            JAVA_HOME_SOURCE: JAVA_HOME_12_X64
            artifactEnvName: 'OpenJdkLatestWindows'
      steps:
        - task: PowerShell@2
          displayName: Build & Benchmark
          inputs:
            filePath: etc/scripts/benchmark.ps1
            arguments: $(JAVA_HOME_SOURCE)
          env:
            RANDOM_DOT_ORG_KEY: $(RANDOM_DOT_ORG_KEY)
        - task: PublishBuildArtifacts@1
          displayName: Publish Results (1 Thread)
          inputs:
            pathtoPublish: benchmark/target/benchmark_results_one_thread.txt
            artifactName: Benchmark - $(artifactEnvName) - 1 Thread
        - task: PublishBuildArtifacts@1
          displayName: Publish Results (2 Threads)
          inputs:
            pathtoPublish: benchmark/target/benchmark_results_two_threads.txt
            artifactName: Benchmark - $(artifactEnvName) - 2 Threads
    - job: BenchmarkOracleLimitedCrypto
      timeoutInMinutes: 15
      pool:
        vmImage: 'ubuntu-latest'
      variables:
        JAVA8: 'true'
        artifactEnvName: OracleLimitedCrypto
      steps:
        - script: sudo ./etc/scripts/installOracleJdk8.sh
          displayName: Download & Install Java
        - template: etc/azureTemplate/benchmark.yml
          parameters:
            whichTest: 'io.github.pr0methean.betterrandom.benchmark.AesCounterRandomBenchmark'
  - stage: Dieharder
    dependsOn: UnitTests
    jobs:
    - job: Dieharder
      timeoutInMinutes: 90
      variables:
        javaUrl: $(OpenJNineLatestLinux)
        JAVA_HOME: jdk
      strategy:
        matrix:
          AesCounterRandom:
            class: AesCounterRandom
          Cmwc4096Random:
            class: Cmwc4096Random
          MersenneTwisterRandom:
            class: MersenneTwisterRandom
          XorShiftRandom:
            class: XorShiftRandom
          Pcg128Random:
            class: Pcg128Random
          Pcg64Random:
            class: Pcg64Random
          SingleThreadSplittableRandomAdapter:
            class: 'adapter.SingleThreadSplittableRandomAdapter'
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - template: etc/azureTemplate/installJavaJti.yml
        - script: sudo apt install dieharder
          displayName: Install DieHarder
        - script: ./etc/scripts/dieharder.sh
          displayName: Build BetterRandom & Run DieHarder Tests
          env:
            CLASS: $(class)
          failOnStderr: false
        - task: PublishBuildArtifacts@1
          displayName: Publish Report
          inputs:
            pathtoPublish: dieharder.txt
            artifactName: DieHarder Randomness Tests - $(class)
