variables:
  openjdk11linux: 'https://github.com/AdoptOpenJDK/openjdk11-binaries/releases/download/jdk-11.0.2%2B9/OpenJDK11U-jdk_x64_linux_hotspot_11.0.2_9.tar.gz'
  openjdk10linux: 'https://github.com/AdoptOpenJDK/openjdk10-releases/releases/download/jdk-10.0.2%2B13/OpenJDK10_x64_Linux_jdk-10.0.2%2B13.tar.gz'
  openjdk09linux: 'https://github.com/AdoptOpenJDK/openjdk9-binaries/releases/download/jdk-9.0.4%2B11/OpenJDK9U-jdk_x64_linux_hotspot_9.0.4_11.tar.gz'
  openjdk08linux: 'https://github.com/AdoptOpenJDK/openjdk8-binaries/releases/download/jdk8u202-b08/OpenJDK8U-jdk_x64_linux_hotspot_8u202b08.tar.gz'
  openjdk11mac: 'https://github.com/AdoptOpenJDK/openjdk11-binaries/releases/download/jdk-11.0.2%2B9/OpenJDK11U-jdk_x64_mac_hotspot_11.0.2_9.tar.gz'
  openjdk10mac: 'https://github.com/AdoptOpenJDK/openjdk10-releases/releases/download/jdk-10.0.2%2B13/OpenJDK10_x64_Mac_jdk-10.0.2%2B13.tar.gz'
  openjdk09mac: 'https://github.com/AdoptOpenJDK/openjdk9-binaries/releases/download/jdk-9%2B181/OpenJDK9U-jdk_x64_mac_hotspot_9_181.tar.gz'
  openjdk08mac: 'https://github.com/AdoptOpenJDK/openjdk8-binaries/releases/download/jdk8u202-b08/OpenJDK8U-jdk_x64_mac_hotspot_8u202b08.tar.gz'
  openjdk11win: 'https://github.com/AdoptOpenJDK/openjdk11-binaries/releases/download/jdk-11.0.2%2B9/OpenJDK11U-jdk_x64_windows_hotspot_11.0.2_9.zip'
  openjdk10win: 'https://github.com/AdoptOpenJDK/openjdk10-releases/releases/download/jdk-10.0.2%2B13/OpenJDK10_x64_Win_jdk-10.0.2%2B13.zip'
  openjdk09win: 'https://github.com/AdoptOpenJDK/openjdk9-binaries/releases/download/jdk-9.0.4%2B11/OpenJDK9U-jdk_x64_windows_hotspot_9.0.4_11.zip'
  openjdk08win: 'https://github.com/AdoptOpenJDK/openjdk8-binaries/releases/download/jdk8u202-b08/OpenJDK8U-jdk_x64_windows_hotspot_8u202b08.zip'
  openjnine11linux: 'https://github.com/AdoptOpenJDK/openjdk11-binaries/releases/download/jdk-11.0.2%2B9_openj9-0.12.1/OpenJDK11U-jdk_x64_linux_openj9_11.0.2_9_openj9-0.12.1_openj9-0.12.1.tar.gz'
  openjnine11mac: 'https://github.com/AdoptOpenJDK/openjdk11-binaries/releases/download/jdk-11.0.2%2B9_openj9-0.12.1/OpenJDK11U-jdk_x64_mac_openj9_11.0.2_9_openj9-0.12.1_openj9-0.12.1.tar.gz'
  openjnine11win: 'https://github.com/AdoptOpenJDK/openjdk11-binaries/releases/download/jdk-11.0.2%2B9_openj9-0.12.1/OpenJDK11U-jdk_x64_windows_openj9_11.0.2_9_openj9-0.12.1_openj9-0.12.1.zip'
#  openjnine10linux: 'https://github.com/AdoptOpenJDK/openjdk10-openj9-releases/releases/download/jdk-10.0.2%2B13_openj9-0.9.0/OpenJDK10-OPENJ9_x64_Linux_jdk-10.0.2.13_openj9-0.9.0.tar.gz'
#  openjnine09linux: 'https://github.com/AdoptOpenJDK/openjdk9-openj9-releases/releases/download/jdk-9.0.4%2B12_openj9-0.9.0/OpenJDK9-OPENJ9_x64_Linux_jdk-9.0.4.12_openj9-0.9.0.tar.gz'
  torForWindows: 'https://www.torproject.org/dist/torbrowser/8.0.8/torbrowser-install-win64-8.0.8_en-US.exe'
trigger:
  branches:
    include:
      #    - master
      #    - java7
      - azurePipeline201903
      - azurePipeline201903a
  paths:
    exclude:
      - README.md
      - CHANGELOG.md
#pr:
#  branches:
#    include:
#    - master
#    - java7
#  paths:
#    exclude:
#    - README.md
#    - CHANGELOG.md
jobs:
  - job: UnitLinux
    variables:
      JAVA_HOME: jdk
    strategy:
      matrix:
        OpenJdk08Linux:
          JAVA8: 'true'
          javaUrl: $(OpenJdk08Linux)
          vmImage: 'ubuntu-16.04'
          coverageName: OpenJdk08Linux
        OpenJdk09Linux:
          javaUrl: $(OpenJdk09Linux)
          vmImage: 'ubuntu-16.04'
          coverageName: OpenJdk09Linux
        OpenJdk10Linux:
          javaUrl: $(OpenJdk10Linux)
          vmImage: 'ubuntu-16.04'
          coverageName: OpenJdk10Linux
        OpenJdk11Linux:
          javaUrl: $(OpenJdk11Linux)
          vmImage: 'ubuntu-16.04'
          coverageName: OpenJdk11Linux
        OpenJNine11Linux:
          javaUrl: $(OpenJNine11Linux)
          vmImage: 'ubuntu-16.04'
          coverageName: OpenJNine11Linux
    #      OpenJNine11Mac:
    #        javaUrl: $(openjnine11mac)
    #        vmImage: 'macOs-10.13'
    pool:
      vmImage: $(vmImage)
    steps:
      - script: wget $(javaUrl) -O jdk.tar.gz
        displayName: Download Java Installer
      - task: JavaToolInstaller@0
        displayName: Install Java
        inputs:
          jdkSourceOption: localDirectory
          jdkFile: jdk.tar.gz
          cleanDestinationDirectory: true
          jdkDestinationDirectory: $(JAVA_HOME)
          jdkArchitectureOption: x64
      - template: etc/azureTemplate/unitTestsUbuntu.yml
      - template: etc/azureTemplate/publishCoverage.yml
  - job: UnitOracleLimitedCrypto
    pool:
      vmImage: 'ubuntu-16.04'
    variables:
      JAVA8: 'true'
      coverageName: OracleLimitedCrypto
    steps:
      - script: sudo ./installOracleJdk8.sh
        displayName: Download & Install Java
      - template: etc/azureTemplate/unitTestsUbuntu.yml
      - template: etc/azureTemplate/publishCoverage.yml
  - job: UnitOracle
    strategy:
      matrix:
        OracleJdk11Linux:
          javaLicence: BCL
          javaVersion: '11'
          installJdkOs: 'linux-x64'
          vmImage: 'ubuntu-16.04'
          coverageName: OracleJdk11Linux
          unitTestTemplate: 'etc/azureTemplate/unitTestsUbuntu.yml'
        OracleJdk11Mac:
          javaLicence: BCL
          javaVersion: '11'
          installJdkOs: 'osx-x64'
          vmImage: 'macOs-10.13'
          coverageName: OracleJdk11Mac
          packageManager: brew
          unitTestTemplate: 'etc/azureTemplate/unitTestsMac.yml'
    pool:
      vmImage: $(vmImage)
    steps:
      - template: etc/azureTemplate/downloadJava.yml
      - template: $(unitTestTemplate)
      - template: etc/azureTemplate/publishCoverage.yml
  - job: UnitMac
    variables:
      JAVA_HOME: jdk
    strategy:
      matrix:
        # Java 7 is /Library/Java/JavaVirtualMachines/jdk1.7.0_80.jdk/Contents/Home
        OpenJdk08Mac:
          JAVA8: 'true'
          JAVA_HOME: '/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home'
          coverageName: OpenJdk08Mac
        OpenJdk09Mac:
          JAVA_HOME: '/Library/Java/JavaVirtualMachines/jdk-9.0.4.jdk/Contents/Home'
          coverageName: OpenJdk09Mac
        OpenJdk10Mac:
          JAVA_HOME: '/Library/Java/JavaVirtualMachines/jdk-10.0.2.jdk/Contents/Home'
          coverageName: OpenJdk10Mac
        OpenJdk11Mac:
          JAVA_HOME: '/Library/Java/JavaVirtualMachines/openjdk-11.0.2.jdk/Contents/Home'
          coverageName: OpenJdk11Mac
    pool:
      vmImage: 'macOs-10.13'
    steps:
      - template: etc/azureTemplate/unitTestsMac.yml
        parameters:
          packageManager: brew
      - template: etc/azureTemplate/publishCoverage.yml
  - job: UnitWindows
    variables:
      coverageName: Windows
      JAVA8: 'true'
    pool:
      vmImage: 'windows-2019'
    steps:
      - script: ./unit-tests.ps1
        displayName: Build & Test
        env:
          RANDOM_DOT_ORG_KEY: $(RANDOM_DOT_ORG_KEY)
      - template: etc/azureTemplate/publishCoverage.yml
  - job: AllUnitTests # empty job used in dependsOn for DRY reasons
    displayName: All unit tests are done.
    dependsOn:
      - UnitWindows
      - UnitMac
      - UnitLinux
      - UnitOracle
      - UnitOracleLimitedCrypto
    pool: server # not a real job, so doesn't need an agent
